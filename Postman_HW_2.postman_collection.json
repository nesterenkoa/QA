{
	"info": {
		"_postman_id": "b360316c-8178-4398-8723-7616c40c892d",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"const requestData = request.data;",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Спарсить response body в json\", function () {",
							"    pm.expect(responseData)",
							"    console.log(\"response:\", responseData)",
							"})",
							"",
							"pm.test(\"Проверить, что name в ответе равно name c request\", function () {",
							"    pm.expect(responseData.name).to.eql(requestData.name);",
							"    console.log(\"response name:\", responseData.name)",
							"})",
							"",
							"pm.test(\"Проверить, что age в ответе равно age с request\", function () {",
							"    pm.expect(responseData.age).to.eql(request.data.age);",
							"    console.log(\"response age:\", responseData.age)",
							"})",
							"",
							"pm.test(\"Проверить, что salary в ответе равно salary с request\", function () {",
							"    pm.expect(responseData.salary).to.eql(+request.data.salary);",
							"    console.log(\"response salary:\", responseData.salary)",
							"})",
							"",
							"pm.test(\"Спарсить request\", function () {",
							"    pm.expect(requestData)",
							"    console.log(\"request:\",requestData)",
							"})",
							"",
							"pm.test(\"Проверить, что name в ответе равно name c request\", function () {",
							"    pm.expect(requestData.name).to.eql(responseData.name);",
							"      console.log(\"reques name:\", requestData.name)",
							"});",
							"",
							"pm.test(\"Проверить, что age в ответе равно age с request\", function () {",
							"    pm.expect(requestData.age).to.eql(responseData.age);",
							"      console.log(\"request age:\", requestData.age)",
							"});",
							"",
							"pm.test(\"Проверить, что salary в ответе равно salary с request\", function () {",
							"    pm.expect(requestData.salary).to.eql(`${responseData.salary}`);",
							"      console.log(\"request salary:\", requestData.salary)",
							"});",
							"",
							"pm.test(\"User family\", function () {",
							"    pm.expect(responseData.family.family)",
							"    console.log(responseData.family)",
							"})",
							"",
							"pm.test(\"User u_salary_1_5_year\", function () {",
							"    pm.expect(responseData.family.u_salary_1_5_year).to.eql(+requestData.salary*4)",
							"    console.log(responseData.family.u_salary_1_5_year)",
							"});",
							"",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Anna",
							"type": "text"
						},
						{
							"key": "age",
							"value": "27",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "900",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData = pm.response.json();",
							"const requestData = pm.request.url.query.toObject();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Спарсить response body в json\", function () {",
							"    pm.expect(responseData)",
							"    console.log(\"response:\", responseData)",
							"})",
							"",
							"pm.test(\"Спарсить request\", function () {",
							"    pm.expect(requestData)",
							"    console.log(\"request:\", requestData,)",
							"})",
							"",
							"",
							"pm.test(\"Проверить, что name в ответе равно name s request (name забрать из request)\", function () {",
							"    pm.expect( responseData.name).to.eql(requestData.name)",
							"    console.log(\"request name:\", requestData.name)",
							"})",
							"",
							"pm.test(\"Проверить, что age в ответе равно age s request (age забрать из request)\", function () {",
							"    pm.expect( responseData.age).to.eql(requestData.age)",
							"    console.log(\"request age:\", requestData.age)",
							"})",
							"",
							"pm.test(\"Проверить, что salary в ответе равно salary s request (salary забрать из request)\", function () {",
							"    pm.expect( responseData.salary).to.eql(+requestData.salary)",
							"    console.log(\"request salary:\", requestData.salary)",
							"})",
							"",
							"pm.test(\"Вывести в консоль параметр family из response)\", function () {",
							"    pm.expect( responseData.family)",
							"    console.log(\"response family:\", responseData.family)",
							"})",
							"",
							"pm.test(\"Проверить, что у параметра dog есть параметры name)\", function () {",
							"    const hasName = Object(responseData.family.pets.dog).hasOwnProperty('name');",
							"    pm.expect(hasName).to.eql(true);",
							"    // console.log(\"response dog name:\", responseData.family.pets.dog.name)",
							"    console.log(hasName)",
							"})",
							"",
							"pm.test(\"Проверить, что у параметра dog есть параметры age)\", function () {",
							"    const hasAge = Object(responseData.family.pets.dog).hasOwnProperty('age');",
							"     pm.expect(hasAge).to.eql(true);",
							"    // console.log(\"response dog age:\", responseData.family.pets.dog.age)",
							"    console.log(hasAge)",
							"})",
							"",
							"pm.test(\" Проверить, что параметр name имеет значение Luky)\", function () {",
							"    pm.expect( responseData.family.pets.dog.name).to.eql(\"Luky\")",
							"    console.log(\"response dog name:\", responseData.family.pets.dog.name)",
							"})",
							"",
							"pm.test(\"Проверить, что параметр age имеет значение 4)\", function () {",
							"    pm.expect( responseData.family.pets.dog.age).to.eql(4)",
							"    console.log(\"response dog age:\", responseData.family.pets.dog.age)",
							"})",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Masha&age=22&salary=270",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Masha"
						},
						{
							"key": "age",
							"value": "22"
						},
						{
							"key": "salary",
							"value": "270"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData =  pm.response.json();",
							"const requestData = pm.request.url.query.toObject();",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Проверить, что name в ответе равно name s request (name забрать из request.)\", function () {",
							"   pm.expect(responseData.name).to.eql(requestData.name)",
							"   console.log(\"request name:\", requestData.name)",
							"});",
							"",
							"pm.test(\"Проверить, что age в ответе равно age s request (age забрать из request.)\", function () {",
							"pm.expect(responseData.age).to.eql(+requestData.age)",
							"console.log(\"request age:\", requestData.age)",
							"})",
							"",
							"pm.test(\" Вывести в консоль параметр salary из request\", function () {",
							"pm.expect(requestData.salary)",
							"console.log(\"request salary:\", requestData.salary)",
							"})",
							"",
							"pm.test(\"Вывести в консоль параметр salary из response\", function () {",
							"pm.expect(responseData.salary)",
							"console.log(\"response salary:\", responseData.salary)",
							"})",
							"",
							"",
							"pm.test(\"Вывести в консоль 0-й элемент параметра salary из response\", function () {",
							"pm.expect(responseData.salary)",
							"console.log(\"response salary 0-й элемент:\", responseData.salary[0])",
							"})",
							"",
							"pm.test(\"Вывести в консоль 1-й элемент параметра salary из response\", function () {",
							"pm.expect(responseData.salary)",
							"console.log(\"response salary 1-й элемент:\", responseData.salary[1])",
							"})",
							"",
							"pm.test(\"Вывести в консоль 2-й элемент параметра salary из response\", function () {",
							"pm.expect(responseData.salary)",
							"console.log(\"response salary 2-й элемент:\", responseData.salary[2])",
							"})",
							"",
							"",
							"pm.test(\"Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.\", function () {",
							"    let responseSalary = responseData.salary[0]/100",
							"pm.expect(responseSalary).to.eql(+requestData.salary[0])",
							"console.log(\"request salary  0-й элемент\", requestData.salary[0])",
							"})",
							"",
							"",
							"pm.test(\" Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request)\", function () {",
							"pm.expect(+responseData.salary[1]).to.eql(requestData.salary*2)",
							"console.log(\"request salary  1-й элемент\", responseData.salary[1])",
							"})",
							"",
							"pm.test(\" Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request)\", function () {",
							"pm.expect(+responseData.salary[2]).to.eql(requestData.salary*3)",
							"console.log(\"request salary  1-й элемент\", responseData.salary[2])",
							"})",
							"",
							"// Передать в окружение переменную name",
							"pm.environment.set(\"name\", responseData.name);",
							"console.log(responseData.name) ",
							"",
							"//  Передать в окружение переменную age",
							"pm.environment.set(\"age\", responseData.age);",
							"",
							"// Передать в окружение переменную salary",
							"pm.environment.set(\"salary\", responseData.salary[0]);",
							"",
							"",
							"",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.",
							"console.log(responseData.salary) ",
							"// 1-ый вариант",
							"responseData.salary.forEach((e,i) => console.log(\"1 option Salary_\" +i+ \": \"+ e))",
							"",
							"// 2-ой вариант",
							"for (let i = 0; i < responseData.salary.length; i++){",
							"   console.log (\"2 option Salary_\" + i +  \": \" +responseData.salary[i])",
							"}",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name=Olga&salary=400&age=46",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Olga"
						},
						{
							"key": "salary",
							"value": "400"
						},
						{
							"key": "age",
							"value": "46"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const responseData =  pm.response.json();",
							"const requestData = request.data;",
							"",
							"console.log(\"response\", responseData )",
							"console.log(\"request\", requestData)",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Проверить, что json response имеет параметр start_qa_salary)\", function () {",
							" const has_start_qa_salary = Object(responseData).hasOwnProperty('start_qa_salary');",
							" console.log('has_start_qa_salary', has_start_qa_salary)",
							"})",
							"",
							"",
							"pm.test(\" Проверить, что json response имеет параметр qa_salary_after_6_months)\", function (){",
							" const has_qa_salary_after_6_months = Object(responseData).hasOwnProperty('qa_salary_after_6_months');",
							" console.log('qa_salary_after_6_months', has_qa_salary_after_6_months)",
							"})",
							"",
							"pm.test(\" Проверить, что json response имеет параметр qa_salary_after_12_months)\", function (){",
							" const has_qa_salary_after_12_months = Object(responseData).hasOwnProperty('qa_salary_after_12_months');",
							" console.log('qa_salary_after_12_months', has_qa_salary_after_12_months)",
							"})",
							"",
							"pm.test(\" Проверить, что json response имеет параметр qa_salary_after_1.5_year)\", function (){",
							" const has_qa_salary_after_one_and_half_year = Object(responseData).hasOwnProperty(['qa_salary_after_1.5_year']);",
							" console.log('qa_salary_after_1.5_year', has_qa_salary_after_one_and_half_year)",
							"})",
							"",
							"pm.test(\" Проверить, что json response имеет параметр qa_salary_after_3.5_years)\", function (){",
							" const has_qa_salary_after_three_years = Object(responseData).hasOwnProperty(['qa_salary_after_3.5_years']);",
							" console.log('qa_salary_after_3.5_years', has_qa_salary_after_three_years)",
							"})",
							"",
							"",
							"pm.test(\" Проверить, что json response имеет параметр person)\", function (){",
							" const has_person = Object(responseData).hasOwnProperty('person');",
							" console.log('person', has_person)",
							"})",
							"",
							"pm.test(\"Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request)\", function (){",
							"   pm.expect( responseData.start_qa_salary).to.eql(+requestData.salary )",
							"    console.log(\"request start_qa_salary :\", requestData.salary )",
							"})",
							"",
							"pm.test(\" Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request)\", function (){",
							"   pm.expect( responseData.qa_salary_after_6_months).to.eql(+requestData.salary*2 )",
							"    console.log(\"qa_salary_after_6_months  :\", responseData.qa_salary_after_6_months )",
							"})",
							"",
							"pm.test(\"Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request)\", function (){",
							"   pm.expect( responseData.qa_salary_after_12_months).to.eql(+requestData.salary*2.7 )",
							"    console.log(\"qa_salary_after_12_months:\", responseData.qa_salary_after_12_months )",
							"})",
							"",
							"pm.test(\"Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request\", function (){",
							"   pm.expect( responseData['qa_salary_after_1.5_year']).to.eql(+requestData.salary*3.3 )",
							"    console.log(\"qa_salary_after_1.5_year :\", responseData['qa_salary_after_1.5_year'] )",
							"})",
							"",
							"",
							"pm.test(\"Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request\", function (){",
							"   pm.expect( responseData['qa_salary_after_3.5_years']).to.eql(+requestData.salary*3.8 )",
							"    console.log(\"qa_salary_after_3.5_years:\", responseData['qa_salary_after_3.5_years'] )",
							"})",
							"",
							"pm.test(\"Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request\", function (){",
							"   pm.expect( responseData.person.u_name[1]).to.eql(+requestData.salary )",
							"     console.log(\"responseData.person u_name 1\", responseData.person.u_name[1])",
							"})",
							"",
							"pm.test(\"Проверить, что что параметр u_age равен age из request (age забрать из request\", function (){",
							"   pm.expect( responseData.person.u_age).to.eql(+requestData.age )",
							"    console.log(\"responseData.person u_age\", responseData.person.u_age)",
							"})",
							"",
							"pm.test(\"Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request\", function (){",
							"   pm.expect( responseData.person.u_salary_5_years).to.eql(+requestData.salary*4.2 )",
							"    console.log(\"responseData.person.u_salary_5_years\", responseData.person.u_salary_5_years)",
							"})",
							"",
							"// Написать цикл который выведет в консоль по порядку элементы списка из параметра person.",
							"for (key in  responseData.person) {",
							"    console.log(key)",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}